import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.List;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.IOException;
import javax.swing.text.AbstractDocument;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author stefano.mureddu
 */
public class Finestra extends javax.swing.JFrame implements ActionListener{
    
    private JTextField ipInizio;
    
    private JTextField ipFine;
    
    private JTextField porte;
    
    private JCheckBox checkA;
    
    private JCheckBox checkB;
    
    private JCheckBox checkC;
    
    private JCheckBox checkD;
    
    private JLabel titolo;
    
    private JLabel ipRange;
    
    private JLabel porteC;
    
    private JPanel title;
    
    private JPanel centro;
    
    private JPanel sotto;
    
    private JButton scan;
    

    /**
     * Creates new form Finestra
     */
    public Finestra() {
        initComponents();
        this.setVisible(true);
        this.setLayout(new BorderLayout());
        this.setMinimumSize(new Dimension(400, 370));
        title = new JPanel(new GridLayout(0,1));
        titolo = new JLabel("Net Scanner", SwingConstants.CENTER);
        titolo.setFont(new Font("Verdana", Font.PLAIN, 30));
        titolo.setForeground(Color.GREEN);
        ipRange = new JLabel("range di ip da considerare", SwingConstants.CENTER);
        ipRange.setFont(new Font("Verdana", Font.PLAIN, 18));
        title.add(titolo);
        title.add(ipRange);
        centro = new JPanel(new GridLayout(1,2));
        sotto = new JPanel(new GridLayout(8,1));
        ipInizio = new JTextField("", SwingConstants.CENTER);
        ipFine = new JTextField("", SwingConstants.CENTER);
        porte = new JTextField("", SwingConstants.CENTER);
        //((AbstractDocument)porte.getDocument()).setDocumentFilter(new PortFilter());
        centro.add(ipInizio);
        centro.add(ipFine);
        porteC = new JLabel("porte da considerare", SwingConstants.CENTER);
        checkA = new JCheckBox("Mostra ip andati a buon fine");
        checkA.setHorizontalAlignment(SwingConstants.CENTER);
        checkB = new JCheckBox("Mostra ip non andati a buon fine");
        checkC = new JCheckBox("Mostra porte andate a buon fine");
        checkD = new JCheckBox("Mostra porte non andate a buon fine");
        checkB.setHorizontalAlignment(SwingConstants.CENTER);
        checkC.setHorizontalAlignment(SwingConstants.CENTER);                   
        checkD.setHorizontalAlignment(SwingConstants.CENTER);
        porteC.setFont(new Font("Verdana", Font.PLAIN, 18));
        scan = new JButton("scanna");
        scan.addActionListener(this);
        sotto.add(porteC);
        sotto.add(porte);
        sotto.add(checkA);
        sotto.add(checkB);
        sotto.add(checkC);
        sotto.add(checkD);
        sotto.add(scan);
        this.add(title, BorderLayout.NORTH);
        this.add(centro, BorderLayout.CENTER);
        this.add(sotto, BorderLayout.SOUTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Finestra().setVisible(true);
            }
        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()==this.scan){
            String ipStart = ipInizio.getText();
            String ipEnd = ipFine.getText();
            String port = porte.getText();
            ipStart = ipStart.replaceAll("\\s+", "");
            ipEnd = ipEnd.replaceAll("\\s+", "");
            port = port.replaceAll("\\s+", "");
            NetScanner scanner = new NetScanner(ipStart, ipEnd, port);
            if(scanner.valido){
                List<String> risultati = new ArrayList<>();
                //if(isValid(ipStart))
                    for(int k = 0; k<scanner.cicli(scanner);k++){
			String ipAddress = scanner.ip[0] + "."+scanner.ip[1] + "."+scanner.ip[2] + "."+scanner.ip[3]; 
			for(int i = 0;i<scanner.porte.length;i++){
                            int[] porta = new int[scanner.porte.length];
                                if(!(scanner.porte[i].contains("-"))){
                                    System.out.println("dentro con "+ scanner.porte[i]);
                                    porta[i] = Integer.parseInt(scanner.porte[i]);
                                    if(scanner.pingPort(ipAddress,porta[i])){
                                    if(checkA.isSelected()&&checkC.isSelected()){
					System.out.print(ipAddress+" funziona sulla porta "+porta[i]);
                                        risultati.add(ipAddress+" funziona sulla porta "+porta[i]);
                                    }else if(checkC.isSelected()){
                                       System.out.print("La porta "+porta[i] + " è aperta");
                                       risultati.add(ipAddress);
                                    }else if(checkA.isSelected()){
                                       System.out.print("L'ip " + ipAddress + " è attivo");
                                       risultati.add("L'ip " + ipAddress + " è attivo");
                                    }
                                    System.out.println();
				}else{
                                    if(checkB.isSelected()&&checkD.isSelected()){
                                        risultati.add(ipAddress+" non funziona sulla porta "+porta[i]);
                                    }else if(checkB.isSelected()){
					System.out.print("L'ip " + ipAddress + " non è attivo");
                                        risultati.add("L'ip " + ipAddress + " non è attivo");
                                    }else if(checkD.isSelected()){
                                       System.out.print("La porta "+porta[i] + " è chiusa");
                                       risultati.add("La porta "+porta[i] + " è chiusa");
                                    }
                                    System.out.println();
				}
                                }else{
                                    String[][] por = new String[scanner.porte.length][2];
                                    por[i] = scanner.porte[i].split("-");
                                    System.out.println(por[i][0]);
                                    System.out.println(por[i][1]);
                                    int p = Integer.parseInt(por[i][0]);
                                    int p1 = Integer.parseInt(por[i][1]);
                                    if(p>p1){
                                        int p2 = p1;
                                        p1 = p;
                                        p = p2;
                                    }
                                    for(int o = p;o<p1;o++){
                                        if(scanner.pingPort(ipAddress,o)){
                                    if(checkA.isSelected()&&checkC.isSelected()){
					System.out.print(ipAddress+" funziona sulla porta "+o);
                                        risultati.add(ipAddress+" funziona sulla porta "+o);
                                    }else if(checkC.isSelected()){
                                       System.out.print("La porta "+o + " è aperta");
                                       risultati.add(ipAddress);
                                    }else if(checkA.isSelected()){
                                       System.out.print("L'ip " + ipAddress + " è attivo");
                                       risultati.add("L'ip " + ipAddress + " è attivo");
                                    }
                                    System.out.println();
				}else{
                                    if(checkB.isSelected()&&checkD.isSelected()){
                                        risultati.add(ipAddress+" non funziona sulla porta "+o);
                                    }else if(checkB.isSelected()){
					System.out.print("L'ip " + ipAddress + " non è attivo");
                                        risultati.add("L'ip " + ipAddress + " non è attivo");
                                    }else if(checkD.isSelected()){
                                       System.out.print("La porta "+o + " è chiusa");
                                       risultati.add("La porta "+o + " è chiusa");
                                    }
                                    System.out.println();
                                    }
                                }
				
                            }
			}
			//sendPingRequest(ipAddress);
			if(scanner.ip[3]==255){
				scanner.ip[3] = 0;
				if(scanner.ip[2]==255){
					scanner.ip[2]=0;
					if(scanner.ip[1]==255){
						scanner.ip[1]=0;
						scanner.ip[0]++;
					}else{
						scanner.ip[1]++;
					}
				}else{
					scanner.ip[2]++;
				}
			}else{
				scanner.ip[3]++;
			}
		}
                try {
                    Path file = Paths.get("Report.txt");
                    Files.write(file,risultati);
                }catch (IOException ioe){
                    System.out.println("Errore nella scrittura del file");
                }
            }else{
                if(!scanner.isValid(ipStart)){
                    ipInizio.setText("Errore, inserisci un ip valido");
                }
                if(!scanner.isValid(ipEnd)){
                    ipFine.setText("Errore, inserisci un ip valido");
                }
                if(!scanner.isValidPort(port)){
                    porte.setText("Errore, inserisci delle porte valide separate"
                            + " da una virgola o da - per un range");
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
